@page "/repositories"

<h1>Repositories</h1>

<p>This component demonstrates showing data.</p>

<p>Add Repository</p>


        <Label Text="Add repository" 
               FontSize="24"
               HorizontalOptions="Center"
               VerticalOptions="StartAndExpand" />

@*         <Entry x:Name="nameEntry" Placeholder="Repository Name" />
        <Entry x:Name="webAddressEntry" Placeholder="Web Address" />
        <Entry x:Name="repositoryTypeEntry" Placeholder="Repository Type" />
        <Entry x:Name="descriptionEntry" Placeholder="Description" /> *@

        <Button Text="Add Repository"
                Clicked="AddRepository" />


@if (repositories == null)
{
    <p><em>Loading...</em></p>
}
else
{


    <table class="table">
        <thead>
            <tr>
                <th>Repository Name</th>
                <th>Description</th>
                <th>Address</th>
                <th>Auth type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var repository in repositories)
            {
                <tr>
                    <td>@repository.Name</td>
                    <td>@repository.Description</td>
                    <td>@repository.WebAddress</td>
                    <td>@repository.RepositoryType</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Repository[] repositories;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);


    }

    private async Task<Repository> AddRepository(string name, string webAddress, RepositoryType repositoryType, string? description)
    {
        Repository newRepo = new Repository(name, webAddress, repositoryType, description);
        repositories.Append(newRepo);

        return newRepo;
    }


    private async Task RemoveRepository(Repository repository)
    {

    }

    private async Task UpdateAllIssues()
    {

    }

    private async Task AddIssue()
    {

    }

    private async Task ModifyIssue()
    {

    }

    private async Task CloseIssue()
    {

    }

    private async Task ExportIssue(List<Issue> issues)
    {

    }

    private async Task ImportIssue(IRepositoryConnector targetRepository)
    {

    }
}
