@page "/repositories"
@using BugRod.Lib.Containers
@inject IJSRuntime IJRuntime

<h1>Repositories</h1>

<p>This component demonstrates showing data.</p>

<p>Add Repository</p>

<EditForm Model="@repositoryModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="name" @bind-Value="repositoryModel.Name" placeholder="Name" />
    <InputText id="webAddress" @bind-Value="repositoryModel.WebAddress" placeholder="Web Address" />
    <InputTextArea id="description" @bind-Value="repositoryModel.Description" placeholder="Description" />

    <InputSelect id="repositoryType" @bind-Value="repositoryModel.RepositoryType">
        <option value="GitLab">GitLab</option>
        <option value="GitHub">GitHub</option>
    </InputSelect>

    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>




@if (repositories == null)
{
    <p><em>Loading...</em></p>
}
else
{


    <table class="table">
        <thead>
            <tr>
                <th>Repository Name</th>
                <th>Description</th>
                <th>Address</th>
                <th>Auth type</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var repository in repositories)
            {
                <tr>
                    <td>@repository.Name</td>
                    <td>@repository.Description</td>
                    <td>@repository.WebAddress</td>
                    <td>@repository.RepositoryType</td>
                    <td><button class="btn btn-primary" @onclick="(() => RemoveRepository(repository))" >Remove</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Repository> repositories = new List<Repository>();
    private RepositoryModelForm repositoryModel = new RepositoryModelForm();

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);
    }

    private async Task<Repository> AddRepository(string name, string webAddress, RepositoryType repositoryType, string? description)
    {
        Repository newRepo = new Repository(name, webAddress, repositoryType, description);
        repositories.Add(newRepo);
        StateHasChanged();
        return newRepo;
    }

    private void HandleValidSubmit()
    {
        AddRepository(
            repositoryModel.Name,
            repositoryModel.WebAddress,
            repositoryModel.RepositoryType,
            repositoryModel.Description

        );

        Console.WriteLine("Form submitted successfully.");
    } 

    private void RemoveRepository(Repository repository)
    {
        repositories.Remove(repository);
    }

    class RepositoryModelForm
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public RepositoryType RepositoryType { get; set; }
        public string? WebAddress { get; set; }
    }
}
